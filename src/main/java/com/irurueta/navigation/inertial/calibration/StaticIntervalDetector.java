package com.irurueta.navigation.inertial.calibration;

import com.irurueta.navigation.LockedException;
import com.irurueta.navigation.inertial.calibration.noise.AccumulatedAccelerationTriadNoiseEstimator;
import com.irurueta.navigation.inertial.calibration.noise.WindowedAccelerationTriadNoiseEstimator;
import com.irurueta.navigation.inertial.calibration.noise.WindowedTriadNoiseEstimator;
import com.irurueta.units.Acceleration;
import com.irurueta.units.AccelerationConverter;
import com.irurueta.units.AccelerationUnit;

/**
 * This detector is in charge of determining when a static period of
 * IMU measurements starts and finishes.
 * Statis periods, are periods of time where the device is considered
 * to remain static (no movement applied to it).
 */
public class StaticIntervalDetector {

    /**
     * Number of samples to keep within the window by default.
     * For an accelerometer generating 100 samples/second, this is equivalent to
     * 1 second.
     * For an accelerometer generating 50 samples/second, this is equivalent to
     * 2 seconds.
     */
    public static final int DEFAULT_WINDOW_SIZE = WindowedTriadNoiseEstimator.DEFAULT_WINDOW_SIZE;

    /**
     * Number of samples to process during the initial static period to determine the accelerometer
     * noise level.
     * For an accelerometer generating 100 samples/secon, this is equivalent to 50 seconds.
     * For an accelerometer generating 50 samples/second, this is equivalent to 100 seconds.
     */
    public static final int DEFAULT_INITIAL_STATIC_SAMPLES = 5000;

    /**
     * Minimum allowed number of samples to be processed during the initial static period.
     */
    public static final int MINIMUM_INITIAL_STATIC_SAMPLES = 2;

    /**
     * Default factor to be applied to detected base noise level in order to determine
     * threshold for static/dynamic period changes. This factor is unit-less.
     */
    public static final double DEFAULT_THRESHOLD_FACTOR = 2.0;

    /**
     * Default factor to determine that a sudden movement has occurred during initialization
     * if instantaneous noise level exceeds accumulated noise level by this factor amount.
     * This factor is unit-less.
     */
    public static final double DEFAULT_INSTANTANEOUS_NOISE_LEVEL_FACTOR = 2.0;

    /**
     * Default overall absolute threshold to determine whether there has been excessive motion
     * during the whole initialization phase.
     * This threshold is expressed in meters per squared second (m/s^2), and by default it is
     * set to the maximum allowed value, thus effectively disabling this error condition check
     * during initialization.
     */
    public static final double DEFAULT_BASE_NOISE_LEVEL_ABSOLUTE_THRESHOLD = Double.MAX_VALUE;

    /**
     * Number of samples to keep in window to find instantaneous noise level averaged within
     * the window of samples.
     * Window size should contain about 1 or 2 seconds of data to be averaged to obtain
     * a more reliable instantaneous noise level.
     */
    private int mWindowSize = DEFAULT_WINDOW_SIZE;

    /**
     * Number of samples to be processed initially while keeping the accelerometer static in order
     * to find the base noise level when device is static.
     */
    private int mInitialStaticSamples = DEFAULT_INITIAL_STATIC_SAMPLES;

    /**
     * Factor to be applied to detected base noise level in order to determine
     * threshold for static/dynamic period changes. This factor is unit-less.
     */
    private double mThresholdFactor = DEFAULT_THRESHOLD_FACTOR;

    /**
     * Factor to determine that a sudden movement has occurred during initialization if
     * instantaneous noise level exceeds accumulated noise level by this factor amount.
     * This factor is unit-less.
     */
    private double mInstantaneousNoiseLevelFactor = DEFAULT_INSTANTANEOUS_NOISE_LEVEL_FACTOR;

    /**
     * Overall absolute threshold to determine whether there has been excessive motion
     * during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this threshold when
     * initialization completes.
     * This threshold is expressed in meters per squared second (m/s^2).
     */
    private double mBaseNoiseLevelAbsoluteThreshold = DEFAULT_BASE_NOISE_LEVEL_ABSOLUTE_THRESHOLD;

    /**
     * Listener to handle events generated by this detector.
     */
    private StaticIntervalDetectorListener mListener;

    /**
     * Current status of this detector.
     */
    private Status mStatus = Status.IDLE;

    /**
     * Accelerometer base noise level that has been detected during initialization expressed in
     * meters per squared second (m/s^2).
     */
    private double mBaseNoiseLevel;

    /**
     * Threshold to determine static/dynamic period changes expressed in meters per squared
     * second (m/s^2).
     */
    private double mThreshold;

    /**
     * Indicates whether this detector is busy processing last provided sample.
     */
    private boolean mRunning;

    /**
     * Number of samples that have been processed so far.
     */
    private int mProcessedSamples;

    /**
     * Gets average x-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     */
    private double mAvgSpecificForceX;

    /**
     * Gets average y-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     */
    private double mAvgSpecificForceY;

    /**
     * Gets average z-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     */
    private double mAvgSpecificForceZ;

    /**
     * Estimator to find instantaneous accelerometer noise level averaged for a certain window of samples.
     */
    private final WindowedAccelerationTriadNoiseEstimator mWindowedNoiseEstimator
            = new WindowedAccelerationTriadNoiseEstimator();

    /**
     * Estimator to find accumulated accelerometer noise level.
     */
    private final AccumulatedAccelerationTriadNoiseEstimator mAccumulatedNoiseEstimator =
            new AccumulatedAccelerationTriadNoiseEstimator();

    /**
     * Constructor.
     */
    public StaticIntervalDetector() {
    }

    /**
     * Constructor.
     *
     * @param listener listener to handle events generated by this detector.
     */
    public StaticIntervalDetector(final StaticIntervalDetectorListener listener) {
        mListener = listener;
    }

    /**
     * Gets length of number of samples to keep within the window being processed
     * to determine instantaneous accelerometer noise level.
     *
     * @return length of number of samples to keep within the window.
     */
    public int getWindowSize() {
        return mWindowSize;
    }

    /**
     * Sets length of number of samples to keep within the window being processed
     * to determine instantaneous accelerometer noise level.
     * Window size must always be larger than allowed minimum value, which is 2.
     *
     * @param windowSize length of number of samples to keep within the window.
     * @throws LockedException          if detector is busy processing a previous sample.
     * @throws IllegalArgumentException if provided value is not valid.
     */
    public void setWindowSize(final int windowSize) throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        mWindowedNoiseEstimator.setWindowSize(windowSize);
        mWindowSize = windowSize;
    }

    /**
     * Gets number of samples to be processed initially while keeping the accelerometer static in order
     * to find the base noise level when device is static.
     *
     * @return number of samples to be processed initially.
     */
    public int getInitialStaticSamples() {
        return mInitialStaticSamples;
    }

    /**
     * Sets number of samples to be processed initially while keeping the accelerometer static in order
     * to find the base noise level when device is static.
     *
     * @param initialStaticSamples number of samples to be processed initially.
     * @throws LockedException          if detector is busy.
     * @throws IllegalArgumentException if provided value is less than {@link #MINIMUM_INITIAL_STATIC_SAMPLES}
     */
    public void setInitialStaticSamples(final int initialStaticSamples)
            throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        if (initialStaticSamples < MINIMUM_INITIAL_STATIC_SAMPLES) {
            throw new IllegalArgumentException();
        }

        mInitialStaticSamples = initialStaticSamples;
    }

    /**
     * Gets factor to be applied to detected base noise level in order to
     * determine threshold for static/dynamic period changes. This factor is
     * unit-less.
     *
     * @return factor to be applied to detected base noise level.
     */
    public double getThresholdFactor() {
        return mThresholdFactor;
    }

    /**
     * Sets factor to be applied to detected base noise level in order to
     * determine threshold for static/dynamic period changes. This factor is
     * unit-less.
     *
     * @param thresholdFactor factor to be applied to detected base noise level.
     * @throws LockedException          if detector is busy.
     * @throws IllegalArgumentException if provided value is zero or negative.
     */
    public void setThresholdFactor(final double thresholdFactor)
            throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }
        if (thresholdFactor <= 0.0) {
            throw new IllegalArgumentException();
        }

        mThresholdFactor = thresholdFactor;
    }

    /**
     * Gets factor to determine that a sudden movement has occurred during
     * initialization if instantaneous noise level exceeds accumulated noise
     * level by this factor amount.
     * This factor is unit-less.
     *
     * @return factor to determine that a sudden movement has occurred.
     */
    public double getInstantaneousNoiseLevelFactor() {
        return mInstantaneousNoiseLevelFactor;
    }

    /**
     * Sets factor to determine that a sudden movement has occurred during
     * initialization if instantaneous noise level exceeds accumulated noise
     * level by this factor amount.
     * This factor is unit-less.
     *
     * @param instantaneousNoiseLevelFactor factor to determine that a sudden
     *                                      movement has occurred during
     *                                      initialization.
     * @throws LockedException          if detector is busy.
     * @throws IllegalArgumentException if provided value is zero or negative.
     */
    public void setInstantaneousNoiseLevelFactor(
            final double instantaneousNoiseLevelFactor) throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }
        if (instantaneousNoiseLevelFactor <= 0.0) {
            throw new IllegalArgumentException();
        }

        mInstantaneousNoiseLevelFactor = instantaneousNoiseLevelFactor;
    }

    /**
     * Gets overall absolute threshold to determine whether there has been
     * excessive motion during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this
     * threshold when initialization completes.
     * This threshold is expressed in meters per squared second (m/s^2).
     *
     * @return overall absolute threshold to determine whether there has
     * been excessive motion.
     */
    public double getBaseNoiseLevelAbsoluteThreshold() {
        return mBaseNoiseLevelAbsoluteThreshold;
    }

    /**
     * Sets overall absolute threshold to determine whether there has been
     * excessive motion during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this
     * threshold when initialization completes.
     * This threshold is expressed in meters per squared second (m/s^2).
     *
     * @param baseNoiseLevelAbsoluteThreshold overall absolute threshold to
     *                                        determine whether there has been
     *                                        excessive motion.
     * @throws LockedException          if detector is busy.
     * @throws IllegalArgumentException if provided value is zero or negative.
     */
    public void setBaseNoiseLevelAbsoluteThreshold(
            final double baseNoiseLevelAbsoluteThreshold) throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }
        if (baseNoiseLevelAbsoluteThreshold <= 0.0) {
            throw new IllegalArgumentException();
        }

        mBaseNoiseLevelAbsoluteThreshold = baseNoiseLevelAbsoluteThreshold;
    }

    /**
     * Gets overall absolute threshold to determine whether there has been
     * excessive motion during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this
     * threshold when initialization completes.
     *
     * @return overall absolute threshold to determine whether there has been
     * excessive motion.
     */
    public Acceleration getBaseNoiseLevelAbsoluteThresholdAsAcceleration() {
        return new Acceleration(mBaseNoiseLevelAbsoluteThreshold,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets overall absolute threshold to determine whether there has been
     * excessive motion during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this
     * threshold when initialization completes.
     *
     * @param result instance where result will be stored.
     */
    public void getBaseNoiseLevelAbsoluteThresholdAsAcceleration(
            final Acceleration result) {
        result.setValue(mBaseNoiseLevelAbsoluteThreshold);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Sets overall absolute threshold to determine whether there has been
     * excessive motion during the whole initialization phase.
     * Failure will be detected if estimated base noise level exceeds this
     * threshold when initialization completes.
     *
     * @param baseNoiseLevelAbsoluteThreshold overall absolute threshold to
     *                                        determine whether there has been
     *                                        excessive motion.
     * @throws LockedException          if detector is busy.
     * @throws IllegalArgumentException if provided value is zero or negative.
     */
    public void setBaseNoiseLevelAbsoluteThreshold(
            final Acceleration baseNoiseLevelAbsoluteThreshold)
            throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        setBaseNoiseLevelAbsoluteThreshold(convertAcceleration(
                baseNoiseLevelAbsoluteThreshold));
    }

    /**
     * Gets listener to handle events generated by this detector.
     *
     * @return listener to handle events.
     */
    public StaticIntervalDetectorListener getListener() {
        return mListener;
    }

    /**
     * Sets listener to handle events generated by this detector.
     *
     * @param listener listener to handle events.
     * @throws LockedException if detector is busy.
     */
    public void setListener(final StaticIntervalDetectorListener listener)
            throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        mListener = listener;
    }

    /**
     * Gets current status of this detector.
     *
     * @return current status of this detector.
     */
    public Status getStatus() {
        return mStatus;
    }

    /**
     * Gets accelerometer base noise level that has been detected during
     * initialization expressed in meters per squared second (m/s^2).
     *
     * @return accelerometer base noise level.
     */
    public double getBaseNoiseLevel() {
        return mBaseNoiseLevel;
    }

    /**
     * Gets accelerometer base noise level that has been detected during
     * initialization.
     *
     * @return accelerometer base noise level.
     */
    public Acceleration getBaseNoiseLevelAsAcceleration() {
        return new Acceleration(mBaseNoiseLevel,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets accelerometer base noise level that has been detected during
     * initialization.
     *
     * @param result instance where result will be stored.
     */
    public void getBaseNoiseLevelAsAcceleration(final Acceleration result) {
        result.setValue(mBaseNoiseLevel);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets threshold to determine static/dynamic period changes expressed in
     * meters per squared second (m/s^2).
     *
     * @return threshold to determine static/dynamic period changes.
     */
    public double getThreshold() {
        return mThreshold;
    }

    /**
     * Gets threshold to determine static/dynamic period changes.
     *
     * @return threshold to determine static/dynamic period changes.
     */
    public Acceleration getThresholdAsAcceleration() {
        return new Acceleration(mThreshold,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets threshold to determine static/dynamic period changes.
     *
     * @param result instance where result will be stored.
     */
    public void getThresholdAsAcceleration(final Acceleration result) {
        result.setValue(mThreshold);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Indicates whether this detector is busy processing last provided sample.
     *
     * @return true if this detector is busy, false otherwise.
     */
    public boolean isRunning() {
        return mRunning;
    }

    /**
     * Gets number of samples that have been processed so far.
     *
     * @return number of samples that have been processed so far.
     */
    public int getProcessedSamples() {
        return mProcessedSamples;
    }

    /**
     * Gets average x-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average x-coordinate of specific force during last static period.
     */
    public double getAvgSpecificForceX() {
        return mAvgSpecificForceX;
    }

    /**
     * Gets average x-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average x-coordinate of specific force during last static period.
     */
    public Acceleration getAvgSpecificForceXAsAcceleration() {
        return new Acceleration(mAvgSpecificForceX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average x-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @param result instance where result will be stored.
     */
    public void getAvgSpecificForceXAsAcceleration(final Acceleration result) {
        result.setValue(mAvgSpecificForceX);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average y-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average y-coordinate of specific force during last static period.
     */
    public double getAvgSpecificForceY() {
        return mAvgSpecificForceY;
    }

    /**
     * Gets average y-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average y-coordinate of specific force during last static period.
     */
    public Acceleration getAvgSpecificForceYAsAcceleration() {
        return new Acceleration(mAvgSpecificForceY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average y-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @param result instance where result will be stored.
     */
    public void getAvgSpecificForceYAsAcceleration(final Acceleration result) {
        result.setValue(mAvgSpecificForceY);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average z-coordinate of specific force during last static period
     * expressed in meters per squared second (m/s^2).
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average z-coordinate of specific force during last static period.
     */
    public double getAvgSpecificForceZ() {
        return mAvgSpecificForceZ;
    }

    /**
     * Gets average z-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average z-coordinate of specific force during last static period.
     */
    public Acceleration getAvgSpecificForceZAsAcceleration() {
        return new Acceleration(mAvgSpecificForceZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average z-coordinate of specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @param result instance where result will be stored.
     */
    public void getAvgSpecificForceZAsAcceleration(final Acceleration result) {
        result.setValue(mAvgSpecificForceZ);
        result.setUnit(AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Gets average specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @return average specific force during last static period.
     */
    public AccelerationTriad getAvgSpecificForce() {
        return new AccelerationTriad(AccelerationUnit.METERS_PER_SQUARED_SECOND,
                mAvgSpecificForceX, mAvgSpecificForceY, mAvgSpecificForceZ);
    }

    /**
     * Gets average specific force during last static period.
     * This value is updated when switching from a static period to a dynamic
     * one or after completing initialization.
     *
     * @param result instance where result will be stored.
     */
    public void getAvgSpecificForce(final AccelerationTriad result) {
        result.setValueCoordinatesAndUnit(
                mAvgSpecificForceX, mAvgSpecificForceY, mAvgSpecificForceZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Processes a new acceleration triad sample.
     *
     * @param triad a new acceleration triad to be processed.
     * @return true if provided triad has been processed, false if provided triad has been skipped because detector
     * previously failed. If detector previously failed, it will need to be reset before processing additional
     * samples.
     * @throws LockedException if detector is busy processing a previous sample.
     */
    public boolean processAccelerationTriad(final AccelerationTriad triad) throws LockedException {
        return processAccelerationTriad(
                convertAcceleration(triad.getValueX(), triad.getUnit()),
                convertAcceleration(triad.getValueY(), triad.getUnit()),
                convertAcceleration(triad.getValueZ(), triad.getUnit()));
    }

    /**
     * Processes a new acceleration triad sample.
     *
     * @param fx x-coordinate of sensed accelerometer specific force.
     * @param fy y-coordinate of sensed accelerometer specific force.
     * @param fz z-coordinate of sensed accelerometer specific force.
     * @return true if provided triad has been processed, false if provided triad has been skipped because detector
     * previously failed. If detector previously failed, it will need to be reset before processing additional
     * samples.
     * @throws LockedException if detector is busy processing a previous sample.
     */
    public boolean processAccelerationTriad(
            final Acceleration fx, final Acceleration fy, final Acceleration fz) throws LockedException {
        return processAccelerationTriad(convertAcceleration(fx), convertAcceleration(fy), convertAcceleration(fz));
    }

    /**
     * Processed a new acceleration triad sample.
     *
     * @param fx x-coordinate of sensed accelerometer specific force expressed in meters per squared second (m/s^2).
     * @param fy y-coordinate of sensed accelerometer specific force expressed in meters per squared second (m/s^2).
     * @param fz z-coordinate of sensed accelerometer specific force expressed in meters per squared second (m/s^2).
     * @return true if provided triad has been processed, false if provided triad has been skipped because detector
     * previously failed. If detector previously failed, it will need to be reset before processing additional
     * samples.
     * @throws LockedException if detector is busy processing a previous sample.
     */
    public boolean processAccelerationTriad(final double fx, final double fy, final double fz)
            throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        if (mStatus == Status.FAILED) {
            return false;
        }

        mRunning = true;

        if (mStatus == Status.IDLE) {
            // start initialization
            mStatus = Status.INITIALIZING;

            if (mListener != null) {
                mListener.onInitializationStarted(this);
            }
        }

        mProcessedSamples++;

        final boolean windowedProcessed = mWindowedNoiseEstimator
                .addTriadAndProcess(fx, fy, fz);

        final double windowedStdNorm = mWindowedNoiseEstimator
                .getStandardDeviationNorm();

        final boolean filledWindow = mWindowedNoiseEstimator.isWindowFilled();

        if (mStatus == Status.INITIALIZING) {
            // process sample during initialization
            final boolean accumulatedProcessed = mAccumulatedNoiseEstimator
                    .addTriad(fx, fy, fz);
            final double accumulatedStdNorm = mAccumulatedNoiseEstimator
                    .getStandardDeviationNorm();

            if (mProcessedSamples < mInitialStaticSamples) {
                if (windowedProcessed && accumulatedProcessed) {
                    if (filledWindow && (windowedStdNorm / accumulatedStdNorm > mInstantaneousNoiseLevelFactor)) {
                        // sudden motion detected
                        mStatus = Status.FAILED;

                        // notify error
                        if (mListener != null) {
                            mListener.onError(this, accumulatedStdNorm,
                                    windowedStdNorm,
                                    ErrorReason.SUDDEN_EXCESSIVE_MOVEMENT_DETECTED);
                        }
                    }
                }

            } else {
                // initialization completed
                // set base noise level and threshold
                mBaseNoiseLevel = accumulatedStdNorm;
                mThreshold = mBaseNoiseLevel * mThresholdFactor;

                // keep average specific force in case we want to obtain
                // its value since initial period must be static
                mAvgSpecificForceX = mAccumulatedNoiseEstimator.getAvgX();
                mAvgSpecificForceY = mAccumulatedNoiseEstimator.getAvgY();
                mAvgSpecificForceZ = mAccumulatedNoiseEstimator.getAvgZ();

                // reset accumulated estimator so that we can estimate
                // average specific force in static periods
                mAccumulatedNoiseEstimator.reset();

                if (mBaseNoiseLevel > mBaseNoiseLevelAbsoluteThreshold) {
                    // base noise level exceeds allowed value
                    mStatus = Status.FAILED;

                    // notify error
                    if (mListener != null) {
                        mListener.onError(this, accumulatedStdNorm,
                                windowedStdNorm,
                                ErrorReason.OVERALL_EXCESSIVE_MOVEMENT_DETECTED);
                    }

                } else {
                    // initialization has been successfully completed
                    mStatus = Status.INITIALIZATION_COMPLETED;

                    if (mListener != null) {
                        mListener.onInitializationCompleted(
                                this, mBaseNoiseLevel);
                    }
                }

            }

            mRunning = false;
            return true;
        } else {
            // detect static or dynamic period
            final Status previousStatus = mStatus;

            if (previousStatus == Status.STATIC_INTERVAL ||
                    previousStatus == Status.INITIALIZATION_COMPLETED) {
                // while we are in static interval (or initial static period), keep
                // adding samples to estimate accumulated average specific force
                mAccumulatedNoiseEstimator.addTriad(fx, fy, fz);
            }

            if (windowedStdNorm < mThreshold) {
                mStatus = Status.STATIC_INTERVAL;
            } else {
                mStatus = Status.DYNAMIC_INTERVAL;
            }

            if (previousStatus != mStatus) {
                // static/dynamic period change detected
                switch (mStatus) {
                    case STATIC_INTERVAL:
                        if (mListener != null) {
                            mListener.onStaticIntervalDetected(this);
                        }
                        break;
                    case DYNAMIC_INTERVAL:
                        // when switching from static to dynamic interval,
                        // pick accumulated average specific force
                        mAvgSpecificForceX = mAccumulatedNoiseEstimator.getAvgX();
                        mAvgSpecificForceY = mAccumulatedNoiseEstimator.getAvgY();
                        mAvgSpecificForceZ = mAccumulatedNoiseEstimator.getAvgZ();

                        // reset accumulated estimator when switching to dynamic period
                        mAccumulatedNoiseEstimator.reset();

                        if (mListener != null) {
                            mListener.onDynamicIntervalDetected(this,
                                    mAvgSpecificForceX, mAvgSpecificForceY,
                                    mAvgSpecificForceZ);
                        }
                        break;
                }
            }
        }

        mRunning = false;
        return true;
    }

    /**
     * Resets this detector so that it is initialized again when new samples are added.
     *
     * @throws LockedException if detector is busy.
     */
    public void reset() throws LockedException {
        if (mRunning) {
            throw new LockedException();
        }

        mRunning = true;

        mStatus = Status.IDLE;
        mProcessedSamples = 0;
        mBaseNoiseLevel = 0.0;
        mThreshold = 0.0;

        mWindowedNoiseEstimator.reset();
        mAccumulatedNoiseEstimator.reset();

        if (mListener != null) {
            mListener.onReset(this);
        }

        mRunning = false;
    }

    /**
     * Converts provided acceleration instance to meters per squared second (m/s^2).
     *
     * @param value value to be converted.
     * @return converted value.
     */
    private static double convertAcceleration(final Acceleration value) {
        return convertAcceleration(value.getValue().doubleValue(), value.getUnit());
    }

    /**
     * Converts provided value from provided unit to meters per squared second (m/s^2).
     *
     * @param value value to be converted.
     * @param unit  unit of value to be converted.
     * @return converted value.
     */
    private static double convertAcceleration(final double value, final AccelerationUnit unit) {
        return AccelerationConverter.convert(value, unit, AccelerationUnit.METERS_PER_SQUARED_SECOND);
    }

    /**
     * Possible detector status values.
     */
    public enum Status {
        /**
         * Detector is in idle status when it hasn't processed any sample yet.
         */
        IDLE,

        /**
         * Detector is processing samples in the initial static process to determine base noise level.
         */
        INITIALIZING,

        /**
         * Detector has sucessfully completed processing samples on the initial
         * static period.
         */
        INITIALIZATION_COMPLETED,

        /**
         * A static interval has been detected, where accelerometer is considered to be subject to no substantial
         * movement forces.
         */
        STATIC_INTERVAL,

        /**
         * A dynamic interval has been detected, where accelerometer is considered to be subject to substantial
         * movement forces.
         */
        DYNAMIC_INTERVAL,

        /**
         * Detector has failed. This happens if accelerometer is subject to sudden movement forces while detector
         * is initializing during the initial static period.
         * When detector has failed, no new samples will be allowed to be processed until detector is reset.
         */
        FAILED
    }

    /**
     * Reason why this detector has failed during initialization.
     */
    public enum ErrorReason {
        SUDDEN_EXCESSIVE_MOVEMENT_DETECTED,
        OVERALL_EXCESSIVE_MOVEMENT_DETECTED
    }
}
