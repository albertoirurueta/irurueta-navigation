package com.irurueta.navigation.inertial.calibration.generators;

import com.irurueta.navigation.inertial.calibration.BodyKinematicsSequence;
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyKinematics;
import com.irurueta.navigation.inertial.calibration.StandardDeviationTimedBodyKinematics;
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector;

/**
 * Interface defining events generated by {@link AccelerometerAndGyroscopeMeasurementsGenerator}.
 */
public interface AccelerometerAndGyroscopeMeasurementsGeneratorListener {

    /**
     * Called when initial static period starts so that base noise level starts
     * being estimated.
     *
     * @param generator generator that raised the event.
     */
    void onInitializationStarted(final AccelerometerAndGyroscopeMeasurementsGenerator generator);

    /**
     * Called when initial static period successfully completes and base
     * noise level is estimated so that static and dynamic periods can be
     * detected.
     *
     * @param generator                   generator that raised the event.
     * @param accelerometerBaseNoiseLevel estimated accelerometer base measurement noise level expressed
     *                                    in meters per squared second (m/s^2).
     */
    void onInitializationCompleted(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator,
            final double accelerometerBaseNoiseLevel);

    /**
     * Called when an error is detected during initialization because there has been
     * excessive movement forces.
     *
     * @param generator generator that raised the event.
     * @param reason    reason why error was detected.
     */
    void onError(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator,
            final TriadStaticIntervalDetector.ErrorReason reason);

    /**
     * Called when a static interval has been detected after initialization.
     *
     * @param generator generator that raised the event.
     */
    void onStaticIntervalDetected(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator);

    /**
     * Called when a dynamic interval has been detected after initialization.
     *
     * @param generator generator that raised the event.
     */
    void onDynamicIntervalDetected(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator);

    /**
     * Called when a detected static interval is skipped because there are not
     * enough samples to be processed.
     *
     * @param generator generator that raised the event.
     */
    void onStaticIntervalSkipped(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator);

    /**
     * Called when a detected static interval is skipped because it has too
     * many samples in it.
     *
     * @param generator generator that raised the event.
     */
    void onDynamicIntervalSkipped(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator);

    /**
     * Called when a new measurement for accelerometer calibration is generated.
     *
     * @param generator   generator that raised the event.
     * @param measurement generated accelerometer measurement.
     */
    void onGeneratedAccelerometerMeasurement(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator,
            final StandardDeviationBodyKinematics measurement);

    /**
     * Called when a new measurement for gyroscope calibration is generated.
     *
     * @param generator   generator that raised the event.
     * @param measurement generated gyroscope measurement.
     */
    void onGeneratedGyroscopeMeasurement(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator,
            final BodyKinematicsSequence<StandardDeviationTimedBodyKinematics> measurement);

    /**
     * Called when generator is reset.
     *
     * @param generator generator that raised the event.
     */
    void onReset(
            final AccelerometerAndGyroscopeMeasurementsGenerator generator);
}
