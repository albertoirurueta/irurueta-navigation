/*
 * Copyright (C) 2020 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.navigation.inertial.calibration.generators;

import com.irurueta.navigation.inertial.calibration.BodyKinematicsSequence;
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyKinematics;
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyMagneticFluxDensity;
import com.irurueta.navigation.inertial.calibration.StandardDeviationTimedBodyKinematics;
import com.irurueta.navigation.inertial.calibration.intervals.TriadStaticIntervalDetector;

/**
 * Interface defining events generated by {@link AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator}.
 */
public interface AccelerometerGyroscopeAndMagnetometerMeasurementsGeneratorListener {

    /**
     * Called when initial static period starts so that base noise level starts
     * being estimated.
     *
     * @param generator generator that raised the event.
     */
    void onInitializationStarted(final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);

    /**
     * Called when initial static period successfully completes and base
     * noise level is estimated so that static and dynamic periods can be
     * detected.
     *
     * @param generator                   generator that raised the event.
     * @param accelerometerBaseNoiseLevel estimated accelerometer base measurement noise level expressed
     *                                    in meters per squared second (m/s^2).
     */
    void onInitializationCompleted(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator,
            final double accelerometerBaseNoiseLevel);

    /**
     * Called when an error is detected during initialization because there has been
     * excessive movement forces.
     *
     * @param generator generator that raised the event.
     * @param reason    reason why error was detected.
     */
    void onError(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator,
            final TriadStaticIntervalDetector.ErrorReason reason);

    /**
     * Called when a static interval has been detected after initialization.
     *
     * @param generator generator that raised the event.
     */
    void onStaticIntervalDetected(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);

    /**
     * Called when a dynamic interval has been detected after initialization.
     *
     * @param generator generator that raised the event.
     */
    void onDynamicIntervalDetected(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);

    /**
     * Called when a detected static interval is skipped because there are not
     * enough samples to be processed.
     *
     * @param generator generator that raised the event.
     */
    void onStaticIntervalSkipped(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);

    /**
     * Called when a detected static interval is skipped because it has too
     * many samples in it.
     *
     * @param generator generator that raised the event.
     */
    void onDynamicIntervalSkipped(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);

    /**
     * Called when a new measurement for accelerometer calibration is generated.
     *
     * @param generator   generator that raised the event.
     * @param measurement generated accelerometer measurement.
     */
    void onGeneratedAccelerometerMeasurement(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator,
            final StandardDeviationBodyKinematics measurement);

    /**
     * Called when a new measurement for gyroscope calibration is generated.
     *
     * @param generator   generator that raised the event.
     * @param measurement generated gyroscope measurement.
     */
    void onGeneratedGyroscopeMeasurement(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator,
            final BodyKinematicsSequence<StandardDeviationTimedBodyKinematics> measurement);

    /**
     * Called when a new measurement for magnetometer calibration is generated.
     *
     * @param generator   generator that raised the event.
     * @param measurement generated magnetometer measurement.
     */
    void onGeneratedMagnetometerMeasurement(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator,
            final StandardDeviationBodyMagneticFluxDensity measurement);

    /**
     * Called when generator is reset.
     *
     * @param generator generator that raised the event.
     */
    void onReset(
            final AccelerometerGyroscopeAndMagnetometerMeasurementsGenerator generator);
}
