/*
 * Copyright (C) 2021 Alberto Irurueta Carro (alberto@irurueta.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.irurueta.navigation.inertial.calibration.intervals.thresholdfactor;

/**
 * Listener to notify events generated by {@link IntervalDetectorThresholdFactorOptimizer}.
 *
 * @param <T> type of data to be used as input for this optimizer.
 * @param <S> type of data source for this optimizer.
 */
public interface IntervalDetectorThresholdFactorOptimizerListener<T,
        S extends IntervalDetectorThresholdFactorOptimizerDataSource<T>> {

    /**
     * Called when optimization starts.
     *
     * @param optimizer optimizer that raised the event.
     */
    void onOptimizeStart(final IntervalDetectorThresholdFactorOptimizer<T, S> optimizer);

    /**
     * Called when optimization ends.
     *
     * @param optimizer optimizer that raised the event.
     */
    void onOptimizeEnd(final IntervalDetectorThresholdFactorOptimizer<T, S> optimizer);

    /**
     * Called when optimization progress changes significantly.
     *
     * @param optimizer optimizer that raised the event.
     * @param progress  progress of optimization expressed as a value between 0.0
     *                  and 1.0.
     */
    void onOptimizeProgressChange(
            final IntervalDetectorThresholdFactorOptimizer<T, S> optimizer, float progress);
}
