package com.irurueta.navigation.inertial.calibration.accelerometer;

import com.irurueta.algebra.Matrix;
import com.irurueta.algebra.WrongSizeException;
import com.irurueta.navigation.LockedException;
import com.irurueta.navigation.NotReadyException;
import com.irurueta.navigation.frames.CoordinateTransformation;
import com.irurueta.navigation.frames.ECEFFrame;
import com.irurueta.navigation.frames.FrameType;
import com.irurueta.navigation.frames.InvalidSourceAndDestinationFrameTypeException;
import com.irurueta.navigation.frames.NEDFrame;
import com.irurueta.navigation.frames.converters.NEDtoECEFFrameConverter;
import com.irurueta.navigation.frames.converters.NEDtoECEFPositionVelocityConverter;
import com.irurueta.navigation.geodesic.Constants;
import com.irurueta.navigation.inertial.BodyKinematics;
import com.irurueta.navigation.inertial.ECEFGravity;
import com.irurueta.navigation.inertial.ECEFPosition;
import com.irurueta.navigation.inertial.ECEFVelocity;
import com.irurueta.navigation.inertial.NEDPosition;
import com.irurueta.navigation.inertial.NEDVelocity;
import com.irurueta.navigation.inertial.calibration.BodyKinematicsGenerator;
import com.irurueta.navigation.inertial.calibration.CalibrationException;
import com.irurueta.navigation.inertial.calibration.IMUErrors;
import com.irurueta.navigation.inertial.calibration.StandardDeviationBodyKinematics;
import com.irurueta.navigation.inertial.estimators.ECEFGravityEstimator;
import com.irurueta.navigation.inertial.estimators.ECEFKinematicsEstimator;
import com.irurueta.statistics.UniformRandomizer;
import com.irurueta.units.Acceleration;
import com.irurueta.units.AccelerationUnit;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import static org.junit.Assert.*;

public class KnownPositionAccelerometerCalibratorTest implements
        KnownPositionAccelerometerCalibratorListener {

    private static final double TIME_INTERVAL_SECONDS = 0.02;

    private static final double MICRO_G_TO_METERS_PER_SECOND_SQUARED = 9.80665E-6;
    private static final double DEG_TO_RAD = 0.01745329252;

    private static final double MIN_ANGLE_DEGREES = -180.0;
    private static final double MAX_ANGLE_DEGREES = 180.0;

    private static final double MIN_LATITUDE_DEGREES = -90.0;
    private static final double MAX_LATITUDE_DEGREEs = 90.0;
    private static final double MIN_LONGITUDE_DEGREES = -180.0;
    private static final double MAX_LONGITUDE_DEGREES = 180.0;
    private static final double MIN_HEIGHT = -50.0;
    private static final double MAX_HEIGHT = 50.0;

    private static final int LARGE_MEASUREMENT_NUMBER = 100000;

    private static final double ABSOLUTE_ERROR = 1e-8;
    private static final double LARGE_ABSOLUTE_ERROR = 5e-5;
    private static final double VERY_LARGE_ABSOLUTE_ERROR = 1e-3;

    private static final int TIMES = 100;

    private int mCalibrateStart;
    private int mCalibrateEnd;

    @Test
    public void testConstructor1() throws WrongSizeException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor2() throws WrongSizeException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor3() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor4() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor5() throws WrongSizeException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor6() throws WrongSizeException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor7() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor8() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor9() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor10() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(biasX, biasY, biasZ,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor11() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor12() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor13() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor14() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor15() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor16() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor17() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor18() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor19() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor20() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor21() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor22() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor23() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor24() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor25() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(biasX, biasY, biasZ,
                        sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor26() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor27() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor28() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor29() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor30() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor31() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor32() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz,
                        sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor33() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz,
                        sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor34() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor35() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor36() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor37() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor38() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor39() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor40() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(biasX, biasY, biasZ,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor41() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ, sx, sy, sz,
                        mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor42() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        biasX, biasY, biasZ, sx, sy, sz,
                        mxy, mxz, myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor43() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz, myx,
                        myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor44() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz, myx,
                        myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor45() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor46() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, biasX, biasY, biasZ,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor47() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor48() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bx, by, bz,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor49() throws WrongSizeException {

        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, bx, by, bz,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor50() throws WrongSizeException {

        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, bx, by, bz,
                        sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor51() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz, sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor52() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true,
                        bx, by, bz, sx, sy, sz, mxy, mxz, myx, myz, mzx, mzy,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor53() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz, sx, sy, sz,
                        mxy, mxz, myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor54() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bx, by, bz, sx, sy, sz,
                        mxy, mxz, myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));
    }

    @Test
    public void testConstructor55() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor56() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(new double[1],
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor57() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor58() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, bias,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor59() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(true,
                    new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor60() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(true,
                    new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor61() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor62() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor63() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor64() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor65() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor66() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, ba,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor67() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor68() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, ba,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor69() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor70() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor71() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ba,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ba,
                    new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor72() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ba,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ba,
                    new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor73() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor74() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements, ba, ma,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    measurements, ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor75() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor76() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(true, ba, ma,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 1), ma,
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, new Matrix(1, 3), ma,
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, ba, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(
                    true, ba, new Matrix(3, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor77() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor78() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(measurements,
                        true, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertNull(calibrator.getEcefPosition());
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        assertNull(calibrator.getGroundTruthGravityNorm());
        assertNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertFalse(calibrator.getGroundTruthGravityNormAsAcceleration(null));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 1), ma,
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, new Matrix(1, 3), ma,
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, ba, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(measurements,
                    true, ba, new Matrix(3, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor79() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor80() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor81() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor82() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor83() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor84() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor85() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor86() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor87() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor88() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor89() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor90() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor91() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor92() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor93() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor94() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor95() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor96() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor97() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor98() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor99() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor100() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor101() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor102() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor103() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor104() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor105() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor106() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor107() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor108() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor109() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor110() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor111() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor112() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor113() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor114() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor115() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor116() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor117() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor118() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor119() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor120() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor121() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor122() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor123() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor124() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor125() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor126() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor127() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor128() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor129() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor130() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor131() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor132() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor133() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor134() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, bias,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor135() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        measurements, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor136() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        measurements, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor137() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor138() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor139() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor140() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor141() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor142() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, ba,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor143() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor144() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor145() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor146() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor147() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor148() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor149() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor150() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor151() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        measurements, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor152() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        measurements, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor153() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor154() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition,
                        true, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    true, ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor155() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor156() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(ecefPosition, measurements,
                        true, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertSame(calibrator.getEcefPosition(), ecefPosition);
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(ecefPosition,
                    measurements, true,
                    ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor157() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor158() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor159() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor160() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor161() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor162() throws WrongSizeException {
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor163() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor164() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, new Matrix(3, 1));
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor165() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor166() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor167() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor168() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor169() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor170() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor171() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor172() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor173() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor174() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor175() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor176() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor177() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor178() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor179() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor180() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor181() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor182() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor183() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor184() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor185() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor186() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor187() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor188() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor189() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor190() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor191() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor192() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor193() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor194() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz, sx, sy, sz);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor195() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, Matrix.diagonal(new double[]{sx, sy, sz}));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor196() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor197() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor198() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor199() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor200() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor201() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor202() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, biasX, biasY, biasZ, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor203() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor204() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor205() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor206() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor207() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor208() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor209() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor210() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bx, by, bz, sx, sy, sz, mxy, mxz,
                        myx, myz, mzx, mzy, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[]{biasX, biasY, biasZ}, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));
    }

    @Test
    public void testConstructor211() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor212() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, bias,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor213() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        measurements, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor214() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        measurements, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor215() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor216() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor217() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bias);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true, new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor218() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, bias, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true, new double[1], this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor219() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor220() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, ba,
                        this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor221() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor222() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor223() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor224() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 1),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 3),
                    this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor225() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, ba);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor226() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, ba, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor227() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor228() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor229() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        measurements, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor230() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        measurements, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertFalse(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 13);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor231() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor232() throws WrongSizeException {
        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition,
                        true, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertNull(calibrator.getMeasurements());
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    true, ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor233() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, ba, ma);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertNull(calibrator.getListener());
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 1), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 3), ma);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    ba, new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    ba, new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testConstructor234() throws WrongSizeException {
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();

        final Matrix ba = generateBa();
        final double[] bias = ba.getBuffer();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Matrix ma = generateMaCommonAxis();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator(nedPosition, measurements,
                        true, ba, ma, this);

        // check default values
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();
        assertEquals(bx1.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bx2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx2);
        assertEquals(bx2.getValue().doubleValue(), biasX, 0.0);
        assertEquals(bx2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();
        assertEquals(by1.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by2);
        assertEquals(by2.getValue().doubleValue(), biasY, 0.0);
        assertEquals(by2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();
        assertEquals(bz1.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz2 = new Acceleration(0.0,
                AccelerationUnit.FEET_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz2);
        assertEquals(bz2.getValue().doubleValue(), biasZ, 0.0);
        assertEquals(bz2.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, bias, 0.0);
        final double[] bias2 = new double[3];
        calibrator.getInitialBias(bias2);
        assertArrayEquals(bias1, bias2, 0.0);
        final Matrix b1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(b1, ba);
        final Matrix b2 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(b2);
        assertEquals(b1, b2);
        final Matrix ma1 = new Matrix(3, 3);
        ma1.setSubmatrix(0, 0,
                2, 2,
                new double[]{sx, myx, mzx,
                        mxy, sy, mzy,
                        mxz, myz, sz});
        assertEquals(calibrator.getInitialMa(), ma1);
        final Matrix ma2 = new Matrix(3, 3);
        calibrator.getInitialMa(ma2);
        assertEquals(ma1, ma2);
        assertTrue(calibrator.getEcefPosition().equals(ecefPosition, ABSOLUTE_ERROR));
        assertTrue(calibrator.getNedPosition().equals(nedPosition, ABSOLUTE_ERROR));
        final NEDPosition nedPosition1 = new NEDPosition();
        assertTrue(calibrator.getNedPosition(nedPosition1));
        assertTrue(nedPosition.equals(nedPosition1, ABSOLUTE_ERROR));
        assertSame(calibrator.getMeasurements(), measurements);
        assertTrue(calibrator.isCommonAxisUsed());
        assertSame(calibrator.getListener(), this);
        assertEquals(calibrator.getMinimumRequiredMeasurements(), 10);
        assertFalse(calibrator.isReady());
        assertFalse(calibrator.isRunning());
        assertNull(calibrator.getEstimatedBiases());
        assertFalse(calibrator.getEstimatedBiases(null));
        assertNull(calibrator.getEstimatedBiasesAsMatrix());
        assertFalse(calibrator.getEstimatedBiasesAsMatrix(null));
        assertNull(calibrator.getEstimatedBiasFx());
        assertNull(calibrator.getEstimatedBiasFy());
        assertNull(calibrator.getEstimatedBiasFz());
        assertNull(calibrator.getEstimatedBiasFxAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFxAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFyAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFyAsAcceleration(null));
        assertNull(calibrator.getEstimatedBiasFzAsAcceleration());
        assertFalse(calibrator.getEstimatedBiasFzAsAcceleration(null));
        assertNull(calibrator.getEstimatedMa());
        assertNull(calibrator.getEstimatedSx());
        assertNull(calibrator.getEstimatedSy());
        assertNull(calibrator.getEstimatedSz());
        assertNull(calibrator.getEstimatedMxy());
        assertNull(calibrator.getEstimatedMxz());
        assertNull(calibrator.getEstimatedMyx());
        assertNull(calibrator.getEstimatedMyz());
        assertNull(calibrator.getEstimatedMzx());
        assertNull(calibrator.getEstimatedMzy());
        assertNull(calibrator.getEstimatedCovariance());
        assertEquals(calibrator.getEstimatedChiSq(), 0.0, 0.0);
        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(
                ecefPosition.getX(), ecefPosition.getY(), ecefPosition.getZ());
        assertNotNull(calibrator.getGroundTruthGravityNorm());
        assertEquals(gravity.getNorm(), calibrator.getGroundTruthGravityNorm(), ABSOLUTE_ERROR);
        assertNotNull(calibrator.getGroundTruthGravityNormAsAcceleration());
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration()
                .equals(gravity.getNormAsAcceleration(), ABSOLUTE_ERROR));
        final Acceleration g = new Acceleration(0.0, AccelerationUnit.G);
        assertTrue(calibrator.getGroundTruthGravityNormAsAcceleration(g));
        assertTrue(gravity.getNormAsAcceleration().equals(g, ABSOLUTE_ERROR));

        // Force IllegalArgumentException
        calibrator = null;
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 1), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    new Matrix(1, 3), ma, this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    ba, new Matrix(1, 3), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator = new KnownPositionAccelerometerCalibrator(nedPosition,
                    measurements, true,
                    ba, new Matrix(3, 1), this);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        assertNull(calibrator);
    }

    @Test
    public void testGetSetInitialBiasX() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);

        // set new value
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);

        calibrator.setInitialBiasX(biasX);

        // check
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
    }

    @Test
    public void testGetSetInitialBiasY() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);

        // set new value
        final Matrix ba = generateBa();
        final double biasY = ba.getElementAtIndex(1);

        calibrator.setInitialBiasY(biasY);

        // check
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
    }

    @Test
    public void testGetSetInitialBiasZ() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);

        // set new value
        final Matrix ba = generateBa();
        final double biasZ = ba.getElementAtIndex(2);

        calibrator.setInitialBiasZ(biasZ);

        // check
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
    }

    @Test
    public void testGetSetInitialBiasXAsAcceleration() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        final Acceleration bx1 = calibrator.getInitialBiasXAsAcceleration();

        assertEquals(bx1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bx1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);

        // set new value
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);

        final Acceleration bx2 = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.setInitialBiasX(bx2);

        // check
        final Acceleration bx3 = calibrator.getInitialBiasXAsAcceleration();
        final Acceleration bx4 = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.getInitialBiasXAsAcceleration(bx4);

        assertEquals(bx3, bx4);
    }

    @Test
    public void testGetSetInitialBiasYAsAcceleration() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        final Acceleration by1 = calibrator.getInitialBiasYAsAcceleration();

        assertEquals(by1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(by1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);

        // set new value
        final Matrix ba = generateBa();
        final double biasY = ba.getElementAtIndex(1);

        final Acceleration by2 = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.setInitialBiasY(by2);

        // check
        final Acceleration by3 = calibrator.getInitialBiasYAsAcceleration();
        final Acceleration by4 = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.getInitialBiasYAsAcceleration(by4);

        assertEquals(by3, by4);
    }

    @Test
    public void testGetSetInitialBiasZAsAcceleration() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        final Acceleration bz1 = calibrator.getInitialBiasZAsAcceleration();

        assertEquals(bz1.getValue().doubleValue(), 0.0, 0.0);
        assertEquals(bz1.getUnit(), AccelerationUnit.METERS_PER_SQUARED_SECOND);

        // set new value
        final Matrix ba = generateBa();
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bz2 = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.setInitialBiasZ(bz2);

        // check
        final Acceleration bz3 = calibrator.getInitialBiasZAsAcceleration();
        final Acceleration bz4 = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        calibrator.getInitialBiasZAsAcceleration(bz4);

        assertEquals(bz3, bz4);
    }

    @Test
    public void testSetInitialBias1() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);

        // set new values
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        calibrator.setInitialBias(biasX, biasY, biasZ);

        // check
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
    }

    @Test
    public void testSetInitialBias2() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialBiasX(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasY(), 0.0, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), 0.0, 0.0);

        // set new values
        final Matrix ba = generateBa();
        final double biasX = ba.getElementAtIndex(0);
        final double biasY = ba.getElementAtIndex(1);
        final double biasZ = ba.getElementAtIndex(2);

        final Acceleration bx = new Acceleration(biasX,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration by = new Acceleration(biasY,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);
        final Acceleration bz = new Acceleration(biasZ,
                AccelerationUnit.METERS_PER_SQUARED_SECOND);

        calibrator.setInitialBias(bx, by, bz);

        // check
        assertEquals(calibrator.getInitialBiasX(), biasX, 0.0);
        assertEquals(calibrator.getInitialBiasY(), biasY, 0.0);
        assertEquals(calibrator.getInitialBiasZ(), biasZ, 0.0);
    }

    @Test
    public void testGetSetInitialSx() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double sx = ma.getElementAt(0, 0);

        calibrator.setInitialSx(sx);

        // check
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
    }

    @Test
    public void testGetSetInitialSy() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double sy = ma.getElementAt(1, 1);

        calibrator.setInitialSy(sy);

        // check
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
    }

    @Test
    public void testGetSetInitialSz() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double sz = ma.getElementAt(2, 2);

        calibrator.setInitialSz(sz);

        // check
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
    }

    @Test
    public void testGetSetInitialMxy() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double mxy = ma.getElementAt(0, 1);

        calibrator.setInitialMxy(mxy);

        // check
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
    }

    @Test
    public void testGetSetInitialMxz() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double mxz = ma.getElementAt(0, 2);

        calibrator.setInitialMxz(mxz);

        // check
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
    }

    @Test
    public void testGetSetInitialMyx() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double myx = ma.getElementAt(1, 0);

        calibrator.setInitialMyx(myx);

        // check
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
    }

    @Test
    public void testGetSetInitialMyz() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double myz = ma.getElementAt(1, 2);

        calibrator.setInitialMyz(myz);

        // check
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
    }

    @Test
    public void testGetSetInitialMzx() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double mzx = ma.getElementAt(2, 0);

        calibrator.setInitialMzx(mzx);

        // check
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
    }

    @Test
    public void testGetSetInitialMzy() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);

        // set new value
        final Matrix ma = generateMaGeneral();
        final double mzy = ma.getElementAt(2, 1);

        calibrator.setInitialMzy(mzy);

        // check
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
    }

    @Test
    public void testSetInitialScalingFactors()
            throws WrongSizeException, LockedException {

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);

        // set new values
        final Matrix ma = generateMaGeneral();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);

        calibrator.setInitialScalingFactors(sx, sy, sz);

        // check
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
    }

    @Test
    public void testSetInitialCrossCouplingErrors()
            throws WrongSizeException, LockedException {

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);

        // set new values
        final Matrix ma = generateMaGeneral();
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        calibrator.setInitialCrossCouplingErrors(mxy, mxz, myx, myz, mzx, mzy);

        // check
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
    }

    @Test
    public void testSetInitialScalingFactorsAndCrossCouplingErrors()
            throws WrongSizeException, LockedException {

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default values
        assertEquals(calibrator.getInitialSx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialSz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxy(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMxz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMyz(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzx(), 0.0, 0.0);
        assertEquals(calibrator.getInitialMzy(), 0.0, 0.0);

        // set new values
        final Matrix ma = generateMaGeneral();
        final double sx = ma.getElementAt(0, 0);
        final double sy = ma.getElementAt(1, 1);
        final double sz = ma.getElementAt(2, 2);
        final double mxy = ma.getElementAt(0, 1);
        final double mxz = ma.getElementAt(0, 2);
        final double myx = ma.getElementAt(1, 0);
        final double myz = ma.getElementAt(1, 2);
        final double mzx = ma.getElementAt(2, 0);
        final double mzy = ma.getElementAt(2, 1);

        calibrator.setInitialScalingFactorsAndCrossCouplingErrors(sx, sy, sz,
                mxy, mxz, myx, myz, mzx, mzy);

        // check
        assertEquals(calibrator.getInitialSx(), sx, 0.0);
        assertEquals(calibrator.getInitialSy(), sy, 0.0);
        assertEquals(calibrator.getInitialSz(), sz, 0.0);
        assertEquals(calibrator.getInitialMxy(), mxy, 0.0);
        assertEquals(calibrator.getInitialMxz(), mxz, 0.0);
        assertEquals(calibrator.getInitialMyx(), myx, 0.0);
        assertEquals(calibrator.getInitialMyz(), myz, 0.0);
        assertEquals(calibrator.getInitialMzx(), mzx, 0.0);
        assertEquals(calibrator.getInitialMzy(), mzy, 0.0);
    }

    @Test
    public void testGetSetInitialBias() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        final double[] bias1 = calibrator.getInitialBias();
        assertArrayEquals(bias1, new double[3], 0.0);

        // set new values
        final Matrix ba = generateBa();
        final double[] bias2 = ba.getBuffer();
        calibrator.setInitialBias(bias2);

        // check
        final double[] bias3 = calibrator.getInitialBias();
        final double[] bias4 = new double[3];
        calibrator.getInitialBias(bias4);

        assertArrayEquals(bias2, bias3, 0.0);
        assertArrayEquals(bias2, bias4, 0.0);

        // Force IllegalArgumentException
        try {
            calibrator.getInitialBias(new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.setInitialBias(new double[1]);
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
    }

    @Test
    public void testGetSetInitialBiasAsMatrix() throws WrongSizeException,
            LockedException {

        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        final Matrix bias1 = calibrator.getInitialBiasAsMatrix();
        assertEquals(bias1, new Matrix(3, 1));

        // set new value
        final Matrix bias2 = generateBa();
        calibrator.setInitialBias(bias2);

        // check
        final Matrix bias3 = calibrator.getInitialBiasAsMatrix();
        final Matrix bias4 = new Matrix(3, 1);
        calibrator.getInitialBiasAsMatrix(bias4);

        assertEquals(bias2, bias3);
        assertEquals(bias2, bias4);

        // Force IllegalArgumentException
        try {
            calibrator.getInitialBiasAsMatrix(new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.getInitialBiasAsMatrix(new Matrix(3, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.setInitialBias(new Matrix(1, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.setInitialBias(new Matrix(3, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
    }

    @Test
    public void testGetSetInitialMa() throws WrongSizeException, LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // test default value
        final Matrix ma1 = calibrator.getInitialMa();
        assertEquals(ma1, new Matrix(3, 3));

        // set new value
        final Matrix ma2 = generateMaGeneral();
        calibrator.setInitialMa(ma2);

        // check
        final Matrix ma3 = calibrator.getInitialMa();
        final Matrix ma4 = new Matrix(3, 3);
        calibrator.getInitialMa(ma4);

        assertEquals(ma2, ma3);
        assertEquals(ma2, ma4);

        // Force IllegalArgumentException
        try {
            calibrator.getInitialMa(new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.getInitialMa(new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.setInitialMa(new Matrix(1, 3));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
        try {
            calibrator.setInitialMa(new Matrix(3, 1));
            fail("IllegalArgumentException expected but not thrown");
        } catch (final IllegalArgumentException ignore) {
        }
    }

    @Test
    public void testGetSetEcefPosition() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        assertNull(calibrator.getEcefPosition());

        // set new value
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);
        final NEDVelocity nedVelocity = new NEDVelocity();
        final ECEFPosition ecefPosition = new ECEFPosition();
        final ECEFVelocity ecefVelocity = new ECEFVelocity();
        NEDtoECEFPositionVelocityConverter.convertNEDtoECEF(nedPosition, nedVelocity,
                ecefPosition, ecefVelocity);

        calibrator.setPosition(ecefPosition);

        // check
        assertSame(calibrator.getEcefPosition(), ecefPosition);
    }

    @Test
    public void testGetSetNedPosition() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        assertNull(calibrator.getNedPosition());
        assertFalse(calibrator.getNedPosition(null));

        // set new value
        final UniformRandomizer randomizer = new UniformRandomizer(new Random());
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition1 = new NEDPosition(latitude, longitude, height);

        calibrator.setPosition(nedPosition1);

        // check
        final NEDPosition nedPosition2 = calibrator.getNedPosition();
        final NEDPosition nedPosition3 = new NEDPosition();
        calibrator.getNedPosition(nedPosition3);

        assertTrue(nedPosition1.equals(nedPosition2, ABSOLUTE_ERROR));
        assertTrue(nedPosition1.equals(nedPosition3, ABSOLUTE_ERROR));
    }

    @Test
    public void testGetSetMeasurements() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        assertNull(calibrator.getMeasurements());

        // set new value
        final Collection<StandardDeviationBodyKinematics> measurements =
                Collections.emptyList();
        calibrator.setMeasurements(measurements);

        // check
        assertSame(calibrator.getMeasurements(), measurements);
    }

    @Test
    public void testIsSetCommonAxisUsed() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        assertFalse(calibrator.isCommonAxisUsed());

        // set new value
        calibrator.setCommonAxisUsed(true);

        // check
        assertTrue(calibrator.isCommonAxisUsed());
    }

    @Test
    public void testGetSetListener() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check default value
        assertNull(calibrator.getListener());

        // set new value
        calibrator.setListener(this);

        // check
        assertSame(calibrator.getListener(), this);
    }

    @Test
    public void testIsReady() throws LockedException {
        final KnownPositionAccelerometerCalibrator calibrator =
                new KnownPositionAccelerometerCalibrator();

        // check
        assertFalse(calibrator.isReady());


        // set empty measurements
        final Collection<StandardDeviationBodyKinematics> measurements1 =
                Collections.emptyList();
        calibrator.setMeasurements(measurements1);

        // check
        assertFalse(calibrator.isReady());


        // set enough measurements for general case
        calibrator.setCommonAxisUsed(false);

        final List<StandardDeviationBodyKinematics> measurements2 = new ArrayList<>();
        for (int i = 0; i < KnownPositionAccelerometerCalibrator.MINIMUM_MEASUREMENTS_GENERAL; i++) {
            measurements2.add(new StandardDeviationBodyKinematics());
        }
        calibrator.setMeasurements(measurements2);

        // check
        assertFalse(calibrator.isReady());


        // set position
        final ECEFPosition position = new ECEFPosition();
        calibrator.setPosition(position);

        assertTrue(calibrator.isReady());


        // set enough measurements for common axis case
        measurements2.clear();
        for (int i = 0; i < KnownPositionAccelerometerCalibrator.MINIMUM_MEASUREMENTS_COMON_Z_AXIS; i++) {
            measurements2.add(new StandardDeviationBodyKinematics());
        }
        calibrator.setMeasurements(measurements2);

        // check
        assertFalse(calibrator.isReady());

        calibrator.setCommonAxisUsed(true);

        assertTrue(calibrator.isReady());
    }

    @Test
    public void testCalibrateForGeneralCaseWithMinimumMeasuresAndNoNoise()
            throws WrongSizeException, InvalidSourceAndDestinationFrameTypeException,
            LockedException, NotReadyException {

        int numValid = 0;
        for (int t = 0; t < TIMES; t++) {
            final Matrix ba = generateBa();
            final Matrix bg = generateBg();
            final Matrix ma = generateMaGeneral();
            final Matrix mg = generateMg();
            final Matrix gg = generateGg();
            // when using minimum number of measurements we must not add any noise so that
            // a solution is found, when adding more measurements, certain noise can be added
            final double accelNoiseRootPSD = 0.0;
            final double gyroNoiseRootPSD = 0.0;
            final double accelQuantLevel = 0.0;
            final double gyroQuantLevel = 0.0;

            final IMUErrors errors = new IMUErrors(ba, bg, ma, mg, gg, accelNoiseRootPSD,
                    gyroNoiseRootPSD, accelQuantLevel, gyroQuantLevel);

            final Random random = new Random();
            final UniformRandomizer randomizer = new UniformRandomizer(random);
            final double latitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
            final double longitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
            final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
            final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);

            final double sqrtTimeInterval = Math.sqrt(TIME_INTERVAL_SECONDS);
            final double specificForceStandardDeviation = getAccelNoiseRootPSD() / sqrtTimeInterval;
            final double angularRateStandardDeviation = getGyroNoiseRootPSD() / sqrtTimeInterval;

            final List<StandardDeviationBodyKinematics> measurements = new ArrayList<>();
            for (int i = 0; i < KnownPositionAccelerometerCalibrator.MINIMUM_MEASUREMENTS_GENERAL; i++) {
                final double roll = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double pitch = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double yaw = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final CoordinateTransformation nedC = new CoordinateTransformation(
                        roll, pitch, yaw, FrameType.BODY_FRAME,
                        FrameType.LOCAL_NAVIGATION_FRAME);

                final NEDFrame nedFrame = new NEDFrame(nedPosition, nedC);
                final ECEFFrame ecefFrame = NEDtoECEFFrameConverter
                        .convertNEDtoECEFAndReturnNew(nedFrame);

                // compute ground-truth kinematics that should be generated at provided
                // position, velocity and orientation
                final BodyKinematics trueKinematics = ECEFKinematicsEstimator
                        .estimateKinematicsAndReturnNew(TIME_INTERVAL_SECONDS, ecefFrame,
                                ecefFrame);

                // apply known calibration parameters to distort ground-truth and generate a
                // measured kinematics sample
                final BodyKinematics measuredKinematics = BodyKinematicsGenerator
                        .generate(TIME_INTERVAL_SECONDS, trueKinematics, errors, random);

                final StandardDeviationBodyKinematics measurement =
                        new StandardDeviationBodyKinematics(measuredKinematics,
                                specificForceStandardDeviation,
                                angularRateStandardDeviation);
                measurements.add(measurement);
            }

            // When we have the minimum number of measurements, we need to provide
            // an initial solution close to the true solution
            final KnownPositionAccelerometerCalibrator calibrator =
                    new KnownPositionAccelerometerCalibrator(nedPosition,
                            measurements, false, ba, ma, this);

            // estimate
            reset();
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 0);
            assertEquals(mCalibrateEnd, 0);

            try {
                calibrator.calibrate();
            } catch (final CalibrationException e) {
                continue;
            }

            // check
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 1);
            assertEquals(mCalibrateEnd, 1);

            final Matrix estimatedBa = calibrator.getEstimatedBiasesAsMatrix();
            final Matrix estimatedMa = calibrator.getEstimatedMa();

            if (!ba.equals(estimatedBa, LARGE_ABSOLUTE_ERROR)) {
                continue;
            }
            if (!ma.equals(estimatedMa, ABSOLUTE_ERROR)) {
                continue;
            }

            assertTrue(ba.equals(estimatedBa, LARGE_ABSOLUTE_ERROR));
            assertTrue(ma.equals(estimatedMa, ABSOLUTE_ERROR));

            numValid++;

            break;
        }

        assertTrue(numValid > 0);
    }

    @Test
    public void testCalibrateForGeneralCaseWithLargeNumberOfMeasurementsAndNoise()
            throws WrongSizeException, InvalidSourceAndDestinationFrameTypeException,
            LockedException, NotReadyException {

        int numValid = 0;
        for (int t = 0; t < TIMES; t++) {
            final Matrix ba = generateBa();
            final Matrix bg = generateBg();
            final Matrix ma = generateMaGeneral();
            final Matrix mg = generateMg();
            final Matrix gg = generateGg();
            final double accelNoiseRootPSD = getAccelNoiseRootPSD();
            final double gyroNoiseRootPSD = getGyroNoiseRootPSD();
            final double accelQuantLevel = 0.0;
            final double gyroQuantLevel = 0.0;

            final IMUErrors errors = new IMUErrors(ba, bg, ma, mg, gg, accelNoiseRootPSD,
                    gyroNoiseRootPSD, accelQuantLevel, gyroQuantLevel);

            final Random random = new Random();
            final UniformRandomizer randomizer = new UniformRandomizer(random);
            final double latitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
            final double longitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
            final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
            final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);

            final double sqrtTimeInterval = Math.sqrt(TIME_INTERVAL_SECONDS);
            final double specificForceStandardDeviation = getAccelNoiseRootPSD() / sqrtTimeInterval;
            final double angularRateStandardDeviation = getGyroNoiseRootPSD() / sqrtTimeInterval;

            final List<StandardDeviationBodyKinematics> measurements = new ArrayList<>();
            for (int i = 0; i < LARGE_MEASUREMENT_NUMBER; i++) {
                final double roll = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double pitch = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double yaw = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final CoordinateTransformation nedC = new CoordinateTransformation(
                        roll, pitch, yaw, FrameType.BODY_FRAME,
                        FrameType.LOCAL_NAVIGATION_FRAME);

                final NEDFrame nedFrame = new NEDFrame(nedPosition, nedC);
                final ECEFFrame ecefFrame = NEDtoECEFFrameConverter
                        .convertNEDtoECEFAndReturnNew(nedFrame);

                // compute ground-truth kinematics that should be generated at provided
                // position, velocity and orientation
                final BodyKinematics trueKinematics = ECEFKinematicsEstimator
                        .estimateKinematicsAndReturnNew(TIME_INTERVAL_SECONDS, ecefFrame,
                                ecefFrame);

                // apply known calibration parameters to distort ground-truth and generate a
                // measured kinematics sample
                final BodyKinematics measuredKinematics = BodyKinematicsGenerator
                        .generate(TIME_INTERVAL_SECONDS, trueKinematics, errors, random);

                final StandardDeviationBodyKinematics measurement =
                        new StandardDeviationBodyKinematics(measuredKinematics,
                                specificForceStandardDeviation,
                                angularRateStandardDeviation);
                measurements.add(measurement);
            }

            // When we have a large number of measurements, we do not need to provide
            // an initial solution as it will probably converge to true true solution
            final KnownPositionAccelerometerCalibrator calibrator =
                    new KnownPositionAccelerometerCalibrator(nedPosition,
                            measurements, false, this);

            // estimate
            reset();
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 0);
            assertEquals(mCalibrateEnd, 0);

            try {
                calibrator.calibrate();
            } catch (final CalibrationException e) {
                continue;
            }

            // check
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 1);
            assertEquals(mCalibrateEnd, 1);

            final Matrix estimatedBa = calibrator.getEstimatedBiasesAsMatrix();
            final Matrix estimatedMa = calibrator.getEstimatedMa();

            if (!ba.equals(estimatedBa, VERY_LARGE_ABSOLUTE_ERROR)) {
                continue;
            }
            if (!ma.equals(estimatedMa, 6.0 * LARGE_ABSOLUTE_ERROR)) {
                continue;
            }

            assertTrue(ba.equals(estimatedBa, VERY_LARGE_ABSOLUTE_ERROR));
            assertTrue(ma.equals(estimatedMa, 6.0 * LARGE_ABSOLUTE_ERROR));

            numValid++;

            break;
        }

        assertTrue(numValid > 0);
    }

    @Test
    public void testCalibrateForCommonAxisCaseWithMinimumMeasuresAndNoNoise()
            throws WrongSizeException, InvalidSourceAndDestinationFrameTypeException,
            LockedException, NotReadyException {

        int numValid = 0;
        for (int t = 0; t < TIMES; t++) {
            final Matrix ba = generateBa();
            final Matrix bg = generateBg();
            final Matrix ma = generateMaCommonAxis();
            final Matrix mg = generateMg();
            final Matrix gg = generateGg();
            // when using minimum number of measurements we must not add any noise so that
            // a solution is found, when adding more measurements, certain noise can be added
            final double accelNoiseRootPSD = 0.0;
            final double gyroNoiseRootPSD = 0.0;
            final double accelQuantLevel = 0.0;
            final double gyroQuantLevel = 0.0;

            final IMUErrors errors = new IMUErrors(ba, bg, ma, mg, gg, accelNoiseRootPSD,
                    gyroNoiseRootPSD, accelQuantLevel, gyroQuantLevel);

            final Random random = new Random();
            final UniformRandomizer randomizer = new UniformRandomizer(random);
            final double latitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
            final double longitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
            final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
            final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);

            final double sqrtTimeInterval = Math.sqrt(TIME_INTERVAL_SECONDS);
            final double specificForceStandardDeviation = getAccelNoiseRootPSD() / sqrtTimeInterval;
            final double angularRateStandardDeviation = getGyroNoiseRootPSD() / sqrtTimeInterval;

            final List<StandardDeviationBodyKinematics> measurements = new ArrayList<>();
            for (int i = 0; i < KnownPositionAccelerometerCalibrator.MINIMUM_MEASUREMENTS_COMON_Z_AXIS; i++) {
                final double roll = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double pitch = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double yaw = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final CoordinateTransformation nedC = new CoordinateTransformation(
                        roll, pitch, yaw, FrameType.BODY_FRAME,
                        FrameType.LOCAL_NAVIGATION_FRAME);

                final NEDFrame nedFrame = new NEDFrame(nedPosition, nedC);
                final ECEFFrame ecefFrame = NEDtoECEFFrameConverter
                        .convertNEDtoECEFAndReturnNew(nedFrame);

                // compute ground-truth kinematics that should be generated at provided
                // position, velocity and orientation
                final BodyKinematics trueKinematics = ECEFKinematicsEstimator
                        .estimateKinematicsAndReturnNew(TIME_INTERVAL_SECONDS, ecefFrame,
                                ecefFrame);

                // apply known calibration parameters to distort ground-truth and generate a
                // measured kinematics sample
                final BodyKinematics measuredKinematics = BodyKinematicsGenerator
                        .generate(TIME_INTERVAL_SECONDS, trueKinematics, errors, random);

                final StandardDeviationBodyKinematics measurement =
                        new StandardDeviationBodyKinematics(measuredKinematics,
                                specificForceStandardDeviation,
                                angularRateStandardDeviation);
                measurements.add(measurement);
            }

            // When we have the minimum number of measurements, we need to provide
            // an initial solution close to the true solution
            final KnownPositionAccelerometerCalibrator calibrator =
                    new KnownPositionAccelerometerCalibrator(nedPosition,
                            measurements, true, ba, ma, this);

            // estimate
            reset();
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 0);
            assertEquals(mCalibrateEnd, 0);

            try {
                calibrator.calibrate();
            } catch (final CalibrationException e) {
                continue;
            }

            // check
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 1);
            assertEquals(mCalibrateEnd, 1);

            final Matrix estimatedBa = calibrator.getEstimatedBiasesAsMatrix();
            final Matrix estimatedMa = calibrator.getEstimatedMa();

            if (!ba.equals(estimatedBa, LARGE_ABSOLUTE_ERROR)) {
                continue;
            }
            if (!ma.equals(estimatedMa, ABSOLUTE_ERROR)) {
                continue;
            }

            assertTrue(ba.equals(estimatedBa, LARGE_ABSOLUTE_ERROR));
            assertTrue(ma.equals(estimatedMa, ABSOLUTE_ERROR));

            numValid++;

            break;
        }

        assertTrue(numValid > 0);
    }

    @Test
    public void testCalibrateForCommonAxisCaseWithLargeNumberOfMeasurementsAndNoise()
            throws WrongSizeException, InvalidSourceAndDestinationFrameTypeException,
            LockedException, NotReadyException {

        int numValid = 0;
        for (int t = 0; t < TIMES; t++) {
            final Matrix ba = generateBa();
            final Matrix bg = generateBg();
            final Matrix ma = generateMaCommonAxis();
            final Matrix mg = generateMg();
            final Matrix gg = generateGg();
            final double accelNoiseRootPSD = getAccelNoiseRootPSD();
            final double gyroNoiseRootPSD = getGyroNoiseRootPSD();
            final double accelQuantLevel = 0.0;
            final double gyroQuantLevel = 0.0;

            final IMUErrors errors = new IMUErrors(ba, bg, ma, mg, gg, accelNoiseRootPSD,
                    gyroNoiseRootPSD, accelQuantLevel, gyroQuantLevel);

            final Random random = new Random();
            final UniformRandomizer randomizer = new UniformRandomizer(random);
            final double latitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
            final double longitude = Math.toRadians(
                    randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
            final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
            final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);

            final double sqrtTimeInterval = Math.sqrt(TIME_INTERVAL_SECONDS);
            final double specificForceStandardDeviation = getAccelNoiseRootPSD() / sqrtTimeInterval;
            final double angularRateStandardDeviation = getGyroNoiseRootPSD() / sqrtTimeInterval;

            final List<StandardDeviationBodyKinematics> measurements = new ArrayList<>();
            for (int i = 0; i < LARGE_MEASUREMENT_NUMBER; i++) {
                final double roll = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double pitch = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final double yaw = Math.toRadians(
                        randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
                final CoordinateTransformation nedC = new CoordinateTransformation(
                        roll, pitch, yaw, FrameType.BODY_FRAME,
                        FrameType.LOCAL_NAVIGATION_FRAME);

                final NEDFrame nedFrame = new NEDFrame(nedPosition, nedC);
                final ECEFFrame ecefFrame = NEDtoECEFFrameConverter
                        .convertNEDtoECEFAndReturnNew(nedFrame);

                // compute ground-truth kinematics that should be generated at provided
                // position, velocity and orientation
                final BodyKinematics trueKinematics = ECEFKinematicsEstimator
                        .estimateKinematicsAndReturnNew(TIME_INTERVAL_SECONDS, ecefFrame,
                                ecefFrame);

                // apply known calibration parameters to distort ground-truth and generate a
                // measured kinematics sample
                final BodyKinematics measuredKinematics = BodyKinematicsGenerator
                        .generate(TIME_INTERVAL_SECONDS, trueKinematics, errors, random);

                final StandardDeviationBodyKinematics measurement =
                        new StandardDeviationBodyKinematics(measuredKinematics,
                                specificForceStandardDeviation,
                                angularRateStandardDeviation);
                measurements.add(measurement);
            }

            // When we have a large number of measurements, we do not need to provide
            // an initial solution as it will probably converge to true true solution
            final KnownPositionAccelerometerCalibrator calibrator =
                    new KnownPositionAccelerometerCalibrator(nedPosition,
                            measurements, true, this);

            // estimate
            reset();
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 0);
            assertEquals(mCalibrateEnd, 0);

            try {
                calibrator.calibrate();
            } catch (final CalibrationException e) {
                continue;
            }

            // check
            assertTrue(calibrator.isReady());
            assertFalse(calibrator.isRunning());
            assertEquals(mCalibrateStart, 1);
            assertEquals(mCalibrateEnd, 1);

            final Matrix estimatedBa = calibrator.getEstimatedBiasesAsMatrix();
            final Matrix estimatedMa = calibrator.getEstimatedMa();

            if (!ba.equals(estimatedBa, VERY_LARGE_ABSOLUTE_ERROR)) {
                continue;
            }
            if (!ma.equals(estimatedMa, LARGE_ABSOLUTE_ERROR)) {
                continue;
            }

            assertTrue(ba.equals(estimatedBa, VERY_LARGE_ABSOLUTE_ERROR));
            assertTrue(ma.equals(estimatedMa, LARGE_ABSOLUTE_ERROR));

            numValid++;

            break;
        }

        assertTrue(numValid > 0);
    }

    @Test
    public void testNorms() throws InvalidSourceAndDestinationFrameTypeException {

        // This test checks that the norm of true specific force and true angular
        // rates are equal to the gravity value (approximately 9.81 m/s^2), and the
        // Earth rotation rate respectively for any Earth location.
        // This property is the principle used for KnownPositionAccelerometerCalibrator
        // to be able to calibrate the accelerometer by taking kinemtics measurements
        // with unknown orientation, but known Earth location.

        final Random random = new Random();
        final UniformRandomizer randomizer = new UniformRandomizer(random);
        final double latitude = Math.toRadians(
                randomizer.nextDouble(MIN_LATITUDE_DEGREES, MAX_LATITUDE_DEGREEs));
        final double longitude = Math.toRadians(
                randomizer.nextDouble(MIN_LONGITUDE_DEGREES, MAX_LONGITUDE_DEGREES));
        final double height = randomizer.nextDouble(MIN_HEIGHT, MAX_HEIGHT);
        final NEDPosition nedPosition = new NEDPosition(latitude, longitude, height);

        final double roll = Math.toRadians(
                randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
        final double pitch = Math.toRadians(
                randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
        final double yaw = Math.toRadians(
                randomizer.nextDouble(MIN_ANGLE_DEGREES, MAX_ANGLE_DEGREES));
        final CoordinateTransformation nedC = new CoordinateTransformation(
                roll, pitch, yaw, FrameType.BODY_FRAME,
                FrameType.LOCAL_NAVIGATION_FRAME);

        final NEDFrame nedFrame = new NEDFrame(nedPosition, nedC);
        final ECEFFrame ecefFrame = NEDtoECEFFrameConverter
                .convertNEDtoECEFAndReturnNew(nedFrame);

        final BodyKinematics trueKinematics = ECEFKinematicsEstimator
                .estimateKinematicsAndReturnNew(TIME_INTERVAL_SECONDS, ecefFrame,
                        ecefFrame);

        final double fNorm = trueKinematics.getSpecificForceNorm();
        final double wNorm = trueKinematics.getAngularRateNorm();

        final ECEFGravity gravity = ECEFGravityEstimator.estimateGravityAndReturnNew(ecefFrame);
        final double g = gravity.getNorm();

        assertEquals(g, fNorm, ABSOLUTE_ERROR);
        assertEquals(Constants.EARTH_ROTATION_RATE, wNorm, ABSOLUTE_ERROR);
    }

    @Override
    public void onCalibrateStart(
            final KnownPositionAccelerometerCalibrator calibrator) {
        checkLocked(calibrator);
        mCalibrateStart++;
    }

    @Override
    public void onCalibrateEnd(
            final KnownPositionAccelerometerCalibrator calibrator) {
        checkLocked(calibrator);
        mCalibrateEnd++;
    }

    private void reset() {
        mCalibrateStart = 0;
        mCalibrateEnd = 0;
    }

    private void checkLocked(final KnownPositionAccelerometerCalibrator calibrator) {
        assertTrue(calibrator.isRunning());
        try {
            calibrator.setInitialBiasX(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBiasY(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBiasZ(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBiasX(null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBiasY(null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBiasZ(null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBias(0.0, 0.0, 0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBias(null, null, null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialSx(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialSy(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialSz(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMxy(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMxz(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMyx(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMyz(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMzx(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMzy(0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialScalingFactors(0.0, 0.0, 0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialCrossCouplingErrors(
                    0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialScalingFactorsAndCrossCouplingErrors(
                    0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0,
                    0.0, 0.0, 0.0);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBias((double[]) null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialBias((Matrix) null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setInitialMa(null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setPosition((ECEFPosition) null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setPosition((NEDPosition) null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setMeasurements(null);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setCommonAxisUsed(true);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.setListener(this);
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        }
        try {
            calibrator.calibrate();
            fail("LockedException expected but not thrown");
        } catch (final LockedException ignore) {
        } catch (final Exception e) {
            fail("LockedException expected but not thrown");
        }
    }

    private Matrix generateBa() {
        return Matrix.newFromArray(new double[]{
                900 * MICRO_G_TO_METERS_PER_SECOND_SQUARED,
                -1300 * MICRO_G_TO_METERS_PER_SECOND_SQUARED,
                800 * MICRO_G_TO_METERS_PER_SECOND_SQUARED});
    }

    private Matrix generateBg() {
        return Matrix.newFromArray(new double[]{
                -9 * DEG_TO_RAD / 3600.0,
                13 * DEG_TO_RAD / 3600.0,
                -8 * DEG_TO_RAD / 3600.0});
    }

    private Matrix generateMaGeneral() throws WrongSizeException {
        final Matrix result = new Matrix(3, 3);
        result.fromArray(new double[]{
                500e-6, -300e-6, 200e-6,
                -150e-6, -600e-6, 250e-6,
                -250e-6, 100e-6, 450e-6
        }, false);

        return result;
    }

    private Matrix generateMaCommonAxis() throws WrongSizeException {
        final Matrix result = new Matrix(3, 3);
        result.fromArray(new double[]{
                500e-6, -300e-6, 200e-6,
                0.0, -600e-6, 250e-6,
                0.0, 0.0, 450e-6
        }, false);

        return result;
    }

    private Matrix generateMg() throws WrongSizeException {
        final Matrix result = new Matrix(3, 3);
        result.fromArray(new double[]{
                400e-6, -300e-6, 250e-6,
                0.0, -300e-6, -150e-6,
                0.0, 0.0, -350e-6
        }, false);

        return result;
    }

    private Matrix generateGg() throws WrongSizeException {
        final Matrix result = new Matrix(3, 3);
        final double tmp = DEG_TO_RAD / (3600 * 9.80665);
        result.fromArray(new double[]{
                0.9 * tmp, -1.1 * tmp, -0.6 * tmp,
                -0.5 * tmp, 1.9 * tmp, -1.6 * tmp,
                0.3 * tmp, 1.1 * tmp, -1.3 * tmp
        }, false);

        return result;
    }

    private double getAccelNoiseRootPSD() {
        return 100.0 * MICRO_G_TO_METERS_PER_SECOND_SQUARED;
    }

    private double getGyroNoiseRootPSD() {
        return 0.01 * DEG_TO_RAD / 60.0;
    }
}
